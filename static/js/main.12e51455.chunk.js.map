{"version":3,"sources":["app/MuiThemeProvider.jsx","app/component/EventCodeForm.jsx","app/component/EventInfo.jsx","app/component/CSVDownloader.jsx","app/App.jsx","serviceWorker.js","index.js","logo.svg"],"names":["theme","createMuiTheme","palette","type","ThemeProvider","_ref","children","react_default","a","createElement","styles","defaultOnSubmit","console","warn","EventCodeForm","handleSubmit","e","_this$props$onSubmit","_this","props","onSubmit","preventDefault","eventCode","target","value","eventId","parseInt","atob","isNaN","alert","_unused","this","Grid_default","container","spacing","alignItems","item","xs","sm","TextField_default","fullWidth","name","placeholder","Button_default","variant","Component","EventInfo","_ref$eventUsers","eventUsers","onSave","length","color","onClick","concat","_get","url","fetch","method","headers","then","response","json","catch","err","_saveAs","text","filename","pom","document","setAttribute","encodeURIComponent","click","CSVDownloader","state","handleGetEvent","setState","Object","objectSpread","log","handleSaveAsCSC","csv","parse","fields","label","style","padding","component_EventCodeForm","component_EventInfo","App","MuiThemeProvider","className","src","logo","alt","component_CSVDownloader","Boolean","window","location","hostname","match","ReactDOM","render","src_app_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.12e51455.chunk.js","sourcesContent":["import React from 'react';\nimport {MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\nconst ThemeProvider = ({children}) => (\n    <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n);\n\nexport default ThemeProvider;","import React, {Component} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst defaultOnSubmit = () => console.warn('No onSubmit is passed.');\n\nclass EventCodeForm extends Component {\n\n    handleSubmit = (e) => {\n        const {onSubmit = defaultOnSubmit} = this.props;\n        e.preventDefault();\n        const eventCode = e.target['eventCode'].value;\n        let eventId = '';\n        try {\n            eventId = parseInt(atob(eventCode));\n            if (isNaN(eventId)) {\n                alert('Wrong code.');\n                return;\n            }\n        }\n        catch {\n            alert('Wrong code.');\n            return;\n        }\n\n        onSubmit({eventId});\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <Grid container spacing={16} alignItems=\"flex-end\">\n                    <Grid item xs={12} sm={9}>\n                        <TextField fullWidth type=\"text\" name=\"eventCode\" placeholder=\"Enter your code\" />\n                    </Grid>\n                    <Grid item xs={12} sm={3}>\n                        <Button fullWidth variant=\"outlined\" type=\"submit\">Submit</Button>\n                    </Grid>\n                </Grid>\n            </form>\n        );\n    }\n}\n\nexport default EventCodeForm;","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nconst EventInfo = ({eventUsers = [], onSave}) => {\n    if (eventUsers.length === 0) return null;\n    return (\n        <Button variant=\"contained\" color=\"primary\" onClick={onSave}>{`Download CSV (${eventUsers.length} Check-ins)`}</Button>\n    )\n};\n\nexport default EventInfo;","import React, {Component} from 'react';\nimport {parse} from 'json2csv';\nimport EventCodeForm from './EventCodeForm';\nimport EventInfo from './EventInfo';\n\nconst _get = (url) => {\n    const config = {\n        method: 'GET',\n        headers: {}\n    };\n    return fetch(url, config)\n        .then(response => response.json())\n        .catch((err) => {throw err;});\n};\n\nconst _saveAs = (text, filename) => {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:text/plain;charset=urf-8,' + encodeURIComponent(text));\n    pom.setAttribute('download', filename);\n    pom.click();\n};\n\nclass CSVDownloader extends Component {\n    state = {\n        eventUsers: []\n    };\n\n    handleGetEvent = ({eventId}) => {\n        const url = `https://api.hitalent.us/api/v1/events/${eventId}/event-users`;\n        _get(url)\n            .then(eventUsers => {\n                this.setState(state => ({\n                    ...state,\n                    eventUsers\n                }));\n                console.log(eventUsers);\n            })\n    };\n\n    handleSaveAsCSC = () => {\n        const opts = {\n            fields: [\n                {label: 'First Name', value: 'firstName'},\n                {label: 'Last Name', value: 'lastName'},\n                {label: 'Full Name', value: 'fullName'},\n                {label: 'Organization', value: 'company'},\n                {label: 'Phone', value: 'phone'},\n                {label: 'Email', value: 'email'},\n                {label: 'LinkedIn', value: 'linkedIn'},\n            ]\n        };\n        const csv = parse(this.state.eventUsers, opts);\n        _saveAs(csv, 'event-users.csv');\n    };\n\n    render() {\n        return (\n            <div style={{padding: '0 16px'}}>\n                <EventCodeForm onSubmit={this.handleGetEvent} />\n                <br />\n                <EventInfo eventUsers={this.state.eventUsers} onSave={this.handleSaveAsCSC} />\n            </div>\n\n        );\n    }\n}\n\nexport default CSVDownloader;","import React, {Component} from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport MuiThemeProvider from './MuiThemeProvider';\nimport CSVDownloader from './component/CSVDownloader';\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <CSVDownloader />\n                    </header>\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}